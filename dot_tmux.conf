# '@pane-is-vim' is a pane-local option that is set by the plugin on load,
# and unset when Neovim exits or suspends; note that this means you'll probably
# not want to lazy-load smart-splits.nvim, as the variable won't be set until
# the plugin is loaded

# Set prefix to Ctrl-a (easier to reach than Ctrl-b)
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Direct Ctrl navigation between panes (no prefix needed)
bind -n C-h select-pane -L
bind -n C-j select-pane -D
bind -n C-k select-pane -U
bind -n C-l select-pane -R

# Easy access to copy/visual mode with Ctrl+b
bind -n C-b copy-mode

# Intuitive window splitting
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse mode
set -g mouse on

# Use vim keybindings in copy mode
setw -g mode-keys vi
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Vim-like visual selection and yanking
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel

# Increase scrollback buffer size
set -g history-limit 10000

# Improve colors
set -g default-terminal "screen-256color"

# Reduce escape time for quicker response in Vim
set -sg escape-time 10

# Smart pane switching with awareness of Neovim splits.
bind-key -n C-Left if -F "#{@pane-is-vim}" 'send-keys C-Left'  'select-pane -L'
bind-key -n C-Down if -F "#{@pane-is-vim}" 'send-keys C-Down'  'select-pane -D'
bind-key -n C-Up if -F "#{@pane-is-vim}" 'send-keys C-Up'  'select-pane -U'
bind-key -n C-Right if -F "#{@pane-is-vim}" 'send-keys C-Right'  'select-pane -R'

# Alternatively, if you want to disable wrapping when moving in non-neovim panes, use these bindings
# bind-key -n C-Left if -F '#{@pane-is-vim}' { send-keys C-Left } { if -F '#{pane_at_left}'   '' 'select-pane -L' }
# bind-key -n C-Down if -F '#{@pane-is-vim}' { send-keys C-Down } { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n C-Up if -F '#{@pane-is-vim}' { send-keys C-Up } { if -F '#{pane_at_top}'    '' 'select-pane -U' }
# bind-key -n C-Right if -F '#{@pane-is-vim}' { send-keys C-Right } { if -F '#{pane_at_right}'  '' 'select-pane -R' }

# Smart pane resizing with awareness of Neovim splits.
bind-key -n C-S-Left if -F "#{@pane-is-vim}" 'send-keys C-S-Left' 'resize-pane -L 3'
bind-key -n C-S-Down if -F "#{@pane-is-vim}" 'send-keys C-S-Down' 'resize-pane -D 3'
bind-key -n C-S-Up if -F "#{@pane-is-vim}" 'send-keys C-S-Up' 'resize-pane -U 3'
bind-key -n C-S-Right if -F "#{@pane-is-vim}" 'send-keys C-S-Right' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-Left' select-pane -L
bind-key -T copy-mode-vi 'C-Down' select-pane -D
bind-key -T copy-mode-vi 'C-Up' select-pane -U
bind-key -T copy-mode-vi 'C-Right' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# bind-key -n C-S-v split-window -v
# bind-key -n C-S-h split-window -h

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
